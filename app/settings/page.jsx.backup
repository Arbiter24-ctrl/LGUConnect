"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "../../components/ui/card"
import { Button } from "../../components/ui/button"
import { Label } from "../../components/ui/label"
import { Switch } from "../../components/ui/switch"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../../components/ui/select"
import { Settings, Bell, Palette, Save, User } from "lucide-react"
import { useUser } from "../../lib/user-context"
import { PageHeader } from "../../components/page-header"

const SettingsPage = () => {
  const { user, loading } = useUser()
  const [settings, setSettings] = useState({
    notifications: {
      email: true,
      push: true
    },
    appearance: {
      theme: "system"
    }
  })
  const [isLoading, setIsLoading] = useState(true)
  const [saving, setSaving] = useState(false)

  useEffect(() => {
    try {
      if (user) {
        setIsLoading(false)
      } else if (!loading) {
        setIsLoading(false)
      }
    } catch (error) {
      console.error('SettingsPage useEffect error:', error)
      setIsLoading(false)
    }
  }, [user, loading])

  const handleNotificationChange = (key, value) => {
    try {
      setSettings(prev => ({
        ...prev,
        notifications: {
          ...prev.notifications,
          [key]: value
        }
      }))
    } catch (error) {
      console.error('Error updating notification setting:', error)
    }
  }

  const handleAppearanceChange = (key, value) => {
    try {
      setSettings(prev => ({
        ...prev,
        appearance: {
          ...prev.appearance,
          [key]: value
        }
      }))
    } catch (error) {
      console.error('Error updating appearance setting:', error)
    }
  }

  const handleSave = async () => {
    try {
      setSaving(true)
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000))
      setSaving(false)
      // In a real app, you'd save to your backend here
    } catch (error) {
      console.error('Error saving settings:', error)
      setSaving(false)
    }
  }

  if (loading || isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Settings className="animate-spin mr-2" />
        Loading settings...
      </div>
    )
  }

  if (!user) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-center">
          <User className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
          <p className="text-muted-foreground">Please log in to access settings.</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <PageHeader
        title="Settings"
        subtitle="Manage your application preferences and notifications"
        showUserControls={true}
      />
      
      <div className="container mx-auto px-4 sm:px-6 py-4 sm:py-6">
        <div className="space-y-6">
          <div className="grid gap-6 lg:grid-cols-2">
        {/* Notifications */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Bell className="h-5 w-5" />
              Notifications
            </CardTitle>
            <CardDescription>
              Manage notification preferences for complaint updates
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="email-notifications">Email Notifications</Label>
                <p className="text-sm text-muted-foreground">
                  Receive email alerts for new complaints and status updates
                </p>
              </div>
              <Switch
                id="email-notifications"
                checked={settings.notifications.email}
                onCheckedChange={(checked) => handleNotificationChange('email', checked)}
              />
            </div>
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="push-notifications">Browser Notifications</Label>
                <p className="text-sm text-muted-foreground">
                  Receive browser notifications for urgent complaints
                </p>
              </div>
              <Switch
                id="push-notifications"
                checked={settings.notifications.push}
                onCheckedChange={(checked) => handleNotificationChange('push', checked)}
              />
            </div>
          </CardContent>
        </Card>

        {/* Appearance */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Palette className="h-5 w-5" />
              Display Settings
            </CardTitle>
            <CardDescription>
              Customize the appearance of the application
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="theme">Theme</Label>
              <Select
                value={settings.appearance.theme}
                onValueChange={(value) => handleAppearanceChange('theme', value)}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="light">Light</SelectItem>
                  <SelectItem value="dark">Dark</SelectItem>
                  <SelectItem value="system">System</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* Save Button */}
        <div className="lg:col-span-2">
          <Card>
            <CardContent className="pt-6">
              <div className="flex justify-center">
                <Button onClick={handleSave} disabled={saving} className="min-w-32">
                  {saving ? (
                    <>
                      <Settings className="animate-spin mr-2 h-4 w-4" />
                      Saving...
                    </>
                  ) : (
                    <>
                      <Save className="mr-2 h-4 w-4" />
                      Save Settings
                    </>
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}

export default SettingsPage

